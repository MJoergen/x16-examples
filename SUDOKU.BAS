10 REM A SIMPLE BRUTE-FORCE SUDOKU SOLVER
20 REM IT USES A RECURSIVE BACK-TRACKING
30 REM ALGORITHM WITH A MANUALLY CONTROLLED STACK.

100 REM INITIAL BOARD POSITION

110 DATA 0,0,3, 0,2,0, 6,0,0
120 DATA 9,0,0, 3,0,5, 0,0,1
130 DATA 0,0,1, 8,0,6, 4,0,0
140 REM
150 DATA 0,0,8, 1,0,2, 9,0,0
160 DATA 7,0,0, 0,0,0, 0,0,8
170 DATA 0,0,6, 7,0,8, 2,0,0
180 REM 
190 DATA 0,0,2, 6,0,9, 5,0,0
200 DATA 8,0,0, 2,0,3, 0,0,9
210 DATA 0,0,5, 0,1,0, 3,0,0
220 REM THIS BOARD IS SOLVED IN
230 REM  45 SECONDS
240 REM 201 POSITIONS
250 REM 151 BACK-TRACKING

110 DATA 3,0,0, 8,0,0, 6,4,7
120 DATA 0,0,2, 3,6,4, 0,0,0
130 DATA 4,6,8, 0,9,5, 2,3,1
140 REM
150 DATA 0,0,3, 0,0,0, 5,0,4
160 DATA 1,0,6, 5,4,7, 0,8,2
170 DATA 5,7,4, 0,3,8, 0,0,0
180 REM
190 DATA 0,4,0, 1,0,0, 7,2,3
200 DATA 8,2,1, 0,0,3, 4,0,0
210 DATA 0,3,0, 4,0,2, 9,0,8
220 REM THIS BOARD IS SOLVED IN
230 REM  8 SECONDS
240 REM 47 POSITIONS
250 REM 12 BACK-TRACKING

300 REM ALLOCATE ARRAYS
310 DIM A(9,9)
320 DIM RI(81)
330 DIM RJ(81)

400 REM INITIALIZE BOARD ARRAY
410 FOR I=1TO9
420 FOR J=1TO9
430 READ A(I,J)
440 NEXT J
450 NEXT I

500 REM CLEAR SCREEN AND POSITION CURSOR BELOW BOARD
510 PRINT CHR$(147)
520 FOR I=1TO10
530 PRINT
540 NEXT I

800 REM PRINT OUT INITIAL ARRAY WITH BLACK BACKGROUND
810 C=$01
820 GOSUB 9000
830 C=$61

900 REM SET STARTING SQUARE SQUARE
910 I=1
920 J=1
930 REM INITIALIZE STACK
940 R=1
950 REM STORE INITIAL TIME
960 T=TI

2000 REM RECURSION STARTS HERE
2010 REM INCREMENT NUMBER OF POSITIONS
2020 PS=PS+1

2100 REM FIND AN EMPTY SQUARE
2110 IF A(I,J) = 0 THEN GOTO 2300
2120 J=J+1
2130 IF J<10 THEN GOTO 2100
2140 J=1
2150 I=I+1
2160 IF I<10 THEN GOTO 2100

2200 REM THE SUDOKU IS FINISHED!
2210 PRINT "SOLVED!"
2220 D=TI-T
2230 PRINT INT(D/60); "SECONDS."
2240 PRINT PS; "POSITIONS."
2250 PRINT BT; "BACK-TRACKING."
2260 END

2300 REM THIS SQUARE IS EMPTY
2310 REM TRY ALL POSSIBLE VALUES
2320 A(I,J)=1

2330 REM CHECK IF POSITION IS LEGAL
2340 GOSUB 8000
2350 REM JUMP IF POSITION IS LEGAL
2360 IF E=0 THEN GOTO 2700

2370 REM TRY NEXT POSSIBLE VALUE
2380 A(I,J)=A(I,J)+1
2390 IF A(I,J)<10 GOTO 2330
2400 REM WE HAVE TO BACKTRACK
2410 A(I,J)=0
2420 GOSUB 7000
2430 REM POP POSITION FROM STACK
2440 R=R-1
2450 IF R=0 GOTO 2550
2460 I=RI(R)
2470 J=RJ(R)
2480 REM UPDATE STACK ON SCREEN
2490 VPOKE 0,256*R+100,32
2500 VPOKE 0,256*R+104,32
2510 GOSUB 7000
2520 REM INCREMENT NUMBER OF BACK-TRACKS
2530 BT=BT+1
2540 GOTO 2370
2550 PRINT "NO SOLUTION"
2560 END

2700 REM RECURSION STARTS HERE
2710 REM PRINT VALUE
2720 GOSUB 7000
2730 REM STORE POSITION IN STACK
2740 RI(R)=I
2750 RJ(R)=J
2760 REM UPDATE STACK ON SCREEN
2770 VPOKE 0,256*R+100,I+48
2780 VPOKE 0,256*R+104,J+48
2790 R=R+1
2800 REM JUMP BACK AND SEARCH SOME MORE.
2810 GOTO 2000

7000 REM DISPLAY VALUE AT (I,J)
7010 ADDR=256*I+2*J
7020 IF A(I,J)=0 THEN GOTO 7060
7030 VPOKE 0,ADDR,A(I,J)+48
7040 VPOKE 0,ADDR+1,C
7050 RETURN
7060 VPOKE 0,ADDR,$20
7070 VPOKE 0,ADDR+1,$61
7080 RETURN

8000 REM CHECK IF THERE IS AN ERROR IN SQUARE (I,J)
8010 E=1

8100 FOR K=1TO9
8110 IF J=K THEN GOTO 8130
8120 IF A(I,J)=A(I,K) THEN RETURN
8130 NEXT K

8200 FOR K=1TO9
8210 IF I=K THEN GOTO 8230
8220 IF A(I,J)=A(K,J) THEN RETURN
8230 NEXT K

8300 CI=INT((I-1)/3)
8310 CJ=INT((J-1)/3)
8320 FOR KI=CI*3+1 TO CI*3+3
8330 FOR KJ=CJ*3+1 TO CJ*3+3
8340 IF KI=I AND KJ=J THEN GOTO 8360
8350 IF A(I,J)=A(KI,KJ) THEN RETURN
8360 NEXT KJ
8370 NEXT KI

8400 E=0
8410 RETURN

9000 REM PRINT OUT ARRAY
9010 FOR I=1TO9
9020 FOR J=1TO9
9030 GOSUB 7000
9040 NEXT J
9050 NEXT I
9060 RETURN

