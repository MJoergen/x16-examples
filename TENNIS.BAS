10 REM
20 REM THIS IS A SIMPLE TENNIS GAME.
30 REM USE LEFT AND RIGHT CURSOR KEYS FOR MOVEMENT.

100 REM
110 REM INITIALIZE GAME VARIABLES
120 REM
130 XP=160:         REM X-POSITION OF PLATER
140 YP=480:         REM Y-POSITION OF PLAYER
150 RP=16:          REM RADIUS OF PLAYER
160 XQ=480:         REM X-POSITION OF BOT
170 YQ=480:         REM Y-POSITION OF BOT
180 RQ=16:          REM RADIUS OF BOT
190 XB=162:         REM X-POSITION OF BALL
200 YB=200:         REM Y-POSITION OF BALL
210 RB=8:           REM RADIUS OF BALL
220 XV=0:           REM X-VELOCITY OF BALL
230 YV=0:           REM Y-VELOCITY OF BALL
240 LP=3:           REM LIVES OF PLAYER
250 LQ=3:           REM LIVES OF BOT
260 GR=0.35:        REM GRAVITY
270 OV=0:           REM GAME OVER
280 X0=8:           REM LEFT SIDE OF FIELD
290 X1=640-8:       REM RIGHT SIDE OF FIELD
300 BL=320-8:       REM BARRIER LEFT SIDE
310 BR=320:         REM BARRIER RIGHT SIDE
320 BT=480-80:      REM BARRIER TOP SIDE
330 AP=10*256+20*2: REM SCREEN ADDRESS OF PLAYER SCORE
340 AQ=10*256+60*2: REM SCREEN ADDRESS OF BOT SCORE
350 LV=1:           REM CURRENT LEVEL
360 SC=0:           REM PLAYER SCORE

400 REM
410 REM SOME ADDITIONAL CONSTANTS FOR OPTIMIZATIONS
420 REM
430 BP=(RB+RP)*(RB+RP)
440 BQ=(RB+RQ)*(RB+RQ)
450 GOSUB 6200: REM INITIALIZE SOUND

600 PRINT CHR$(147)
610 PRINT: PRINT: PRINT
620 PRINT "   INITIALIZING. PLEASE WAIT..."
630 GOSUB 8000: REM INITIALIZE GRAPHICS
640 PRINT CHR$($91);CHR$(29);
650 PRINT "                                LEVEL 1"
660 PRINT CHR$(29);
670 PRINT "                                SCORE 0"
680 SO=TI

700 REM
710 REM GAME LOOP
720 REM
730 GOSUB 4000: REM UPDATE PLAYER
740 GOSUB 5000: REM UPDATE BOT
750 GOSUB 5500: REM UPDATE BALL
760 GOSUB 2000: REM HANDLE COLLISIONS
770 GOSUB 7000: REM UPDATE GRAPHICS
780 GOSUB 3000: REM CHECK FOR END OF GAME
785 GOSUB 6500: REM SOUND
790 IF OVER=0 GOTO 700
800 PRINT CHR$($91);CHR$($91);CHR$(29);
810 PRINT "                                GAME OVER!"
820 END

1990 REM HANDLE COLLISIONS
2000 REM COLLISION WITH LEFT WALL
2010 IF XB<X0+RB THEN XB=X0+RB:XV= ABS(XV)

2020 REM COLLISION WITH RIGHT WALL
2030 IF XB>X1-RB THEN XB=X1-RB:XV=-ABS(XV)

2040 REM COLLISION WITH BAR RIGHT SIDE
2050 IF XB>BR AND XB<BR+RB AND YB>BT THEN XB=BR+RB:XV= ABS(XV)

2060 REM COLLISION WITH BAR LEFT SIDE
2070 IF XB>BL-RB AND XB<BL AND YB>BT THEN XB=BL-RB:XV=-ABS(XV)

2080 REM COLLISION WITH BAR TOP SIDE
2090 IF YB>BT-RB AND XB<BR AND XB>BL THEN YB=BT-RB:YV=-ABS(YV)

2100 REM COLLISION WITH BAR LEFT CORNER
2110 XT=XB-BL: YT=YB-BT: D=XT*XT+YT*YT: IF D<RB THEN GOSUB 2400

2120 REM COLLISION WITH BAR RIGHT CORNER
2130 XT=XB-BR: YT=YB-BT: D=XT*XT+YT*YT: IF D<RB THEN GOSUB 2400

2140 REM COLLISION WITH PLAYER
2150 XT=XB-XP: YT=YB-YP: D=XT*XT+YT*YT: IF D<BP THEN GOSUB 2400: SC=SC+LV*10

2160 REM COLLISION WITH BOT
2170 XT=XB-XQ: YT=YB-YQ: D=XT*XT+YT*YT: IF D<BQ THEN GOSUB 2400

2180 REM COLLISION WITH UPPER WALL
2190 IF YB<RB THEN YB=RB:YV= ABS(YV)
2200 RETURN

2390 REM HANDLE COLLISION
2400 T1=(XV*XT+YV*YT)/(XT*XT+YT*YT)
2410 IF T1>0 THEN RETURN
2420 XV=XV-2*T1*XT+RND(0)-0.5
2430 YV=YV-2*T1*YT+RND(0)-0.5
2440 RETURN

2990 REM CHECK FOR GAME OVER
3000 IF YB<480 THEN RETURN
3010 IF XB>BL THEN LQ=LQ-1: VPOKE $1, $FC46+8*LQ, $00
3020 IF XB<BL THEN LP=LP-1: VPOKE $1, $FC26+8*LP, $00
3030 IF LP=0 THEN OVER=1
3040 IF LQ=0 THEN GOSUB 3300: REM NEXT LEVEL
3050 YB=200
3060 XV=0
3070 YV=0
3080 RETURN

3300 LV=LV+1
3310 LP=3
3320 LQ=3
3330 GOSUB 8700
3340 VPOKE 0, 78+4*256, LV+48
3350 GR=GR+0.02
3360 RETURN

3990 REM UPDATE PLAYER
4000 A=JOY(1)
4010 IF (A AND 1) = 0 THEN GOSUB 4300: REM LEFT
4020 IF (A AND 2) = 0 THEN GOSUB 4400: REM RIGHT
4030 RETURN

4290 REM MOVE LEFT
4300 XP=XP-7
4310 IF XP<X0+RP THEN XP=X0+RP
4320 RETURN

4390 REM MOVE RIGHT
4400 XP=XP+7
4410 IF XP>BL-RP THEN XP=BL-RP
4420 RETURN

4990 REM UPDATE BOT
5000 IF XQ>XB+2 THEN XQ=XQ-(6+LV): IF XQ<BR+RQ THEN XQ=BR+RQ
5010 IF XQ<XB+2 THEN XQ=XQ+(6+LV): IF XQ>X1-RQ THEN XQ=X1-RQ
5020 RETURN

5490 REM UPDATE BALL
5500 XB=XB+XV
5510 YB=YB+YV
5520 YV=YV+GR
5530 RETURN

6000 REM MUSIC DATA
6010 DATA $51, 1, 0
6020 DATA $4A, 2, $41,  $51, 2, 0,  $51, 3, 0,  $54, 1, 0
6030 DATA $55, 2, $41,  $51, 2, 0,  $51, 2, 0,  $55, 1, 0,  $55, 1, 0
6040 DATA $54, 2, $3E,  $4E, 2, 0,  $4E, 2, 0,  $54, 2, 0
6050 DATA $55, 2, $41,  $51, 2, 0,  $51, 3, 0,  $51, 1, 0
6060 DATA $4A, 2, $41,  $51, 2, 0,  $51, 3, 0,  $54, 1, 0
6070 DATA $55, 2, $41,  $51, 2, 0,  $51, 2, 0,  $55, 1, 0,  $55, 1, 0
6080 DATA $5A, 2, $3E,  $58, 2, 0,  $55, 2, 0,  $54, 2, 0
6090 DATA $55, 2, $41,  $51, 2, 0,  $51, 3, 0,  $51, 1, 0
6100 DATA $5A, 2, $41,  $5A, 2, 0,  $58, 2, 0,  $55, 2, 0
6110 DATA $58, 2, $3E,  $54, 2, 0,  $54, 3, 0,  $54, 1, 0
6120 DATA $58, 2, $3E,  $58, 2, 0,  $55, 2, 0,  $54, 2, 0
6130 DATA $55, 2, $41,  $51, 2, 0,  $51, 3, 0,  $51, 1, 0
6140 DATA $5A, 2, $41,  $5A, 2, 0,  $58, 2, 0,  $55, 2, 0
6150 DATA $58, 2, $3E,  $54, 2, 0,  $54, 3, 0,  $54, 1, 0
6160 DATA $58, 1, $3E,  $58, 1, 0,  $58, 2, 0,  $55, 2, 0,  $54, 2, 0
6170 DATA $51, 4, $41,  $51, 3, 0
6180 DATA $FF, 1, 0

6199 REM INITIALIZE SOUND CHIP
6200 POKE $9FE0, $80: POKE $9FE1, $1F: REM CHANNEL 0 MODULATOR 1 ATTACK RATE
6210 POKE $9FE0, $A0: POKE $9FE1, $0B: REM CHANNEL 0 MODULATOR 1 DECAY RATE
6220 POKE $9FE0, $E0: POKE $9FE1, $FF: REM CHANNEL 0 MODULATOR 1 RELEASE RATE
6230 POKE $9FE0, $20: POKE $9FE1, $E7: REM CHANNEL 0 FEEDBACK AND CONNECTION
6240 POKE $9FE0, $61: POKE $9FE1, $08: REM CHANNEL 1 MODULATOR 1 TOTAL LEVEL
6250 POKE $9FE0, $81: POKE $9FE1, $1F: REM CHANNEL 1 MODULATOR 1 ATTACK RATE
6260 POKE $9FE0, $A1: POKE $9FE1, $07: REM CHANNEL 1 MODULATOR 1 DECAY RATE
6270 POKE $9FE0, $E1: POKE $9FE1, $FF: REM CHANNEL 1 MODULATOR 1 RELEASE RATE
6280 POKE $9FE0, $21: POKE $9FE1, $D7: REM CHANNEL 1 FEEDBACK AND CONNECTION
6290 POKE $9FE0, $62: POKE $9FE1, $08: REM CHANNEL 2 MODULATOR 1 TOTAL LEVEL
6300 POKE $9FE0, $82: POKE $9FE1, $1F: REM CHANNEL 2 MODULATOR 1 ATTACK RATE
6310 POKE $9FE0, $A2: POKE $9FE1, $07: REM CHANNEL 2 MODULATOR 1 DECAY RATE
6320 POKE $9FE0, $E2: POKE $9FE1, $FF: REM CHANNEL 2 MODULATOR 1 RELEASE RATE
6330 POKE $9FE0, $22: POKE $9FE1, $D7: REM CHANNEL 2 FEEDBACK AND CONNECTION
6340 POKE $9FE0, $63: POKE $9FE1, $08: REM CHANNEL 3 MODULATOR 1 TOTAL LEVEL
6350 POKE $9FE0, $83: POKE $9FE1, $1F: REM CHANNEL 3 MODULATOR 1 ATTACK RATE
6360 POKE $9FE0, $A3: POKE $9FE1, $07: REM CHANNEL 3 MODULATOR 1 DECAY RATE
6370 POKE $9FE0, $E3: POKE $9FE1, $FF: REM CHANNEL 3 MODULATOR 1 RELEASE RATE
6380 POKE $9FE0, $23: POKE $9FE1, $D7: REM CHANNEL 3 FEEDBACK AND CONNECTION

6400 REM INITIALIZE SOUND
6410 MK=0: REM INITIALIZE ARRAY POINTER
6420 REM READ THE ENTIRE SONG INTO THREE ARRAYS
6430 DIM NO(100): REM NOTES OF THE MELODY
6440 DIM DU(100): REM DURATION OF EACH NOTE
6450 DIM CH(100): REM CHORD
6460 MI=0
6470 READ NO(MI), DU(MI), CH(MI)
6480 IF NO(MI)=$FF THEN RETURN
6490 MI=MI+1: GOTO 6470

6500 REM UPDATE SOUND
6510 IF TI<SO THEN RETURN: REM WAIT UNTIL NOTE HAS ENDED
6520 POKE $9FE0, $08: POKE $9FE1, $00: REM KEY OFF
6530 IF NO(MK)>0 THEN GOSUB 6600
6540 IF CH(MK)>0 THEN GOSUB 6700
6550 SO=SO+DU(MK)*8: REM CALCULATE WHEN TO END NOTE
6560 MK=MK+1
6570 IF MK=MI THEN MK=0
6580 RETURN

6600 POKE $9FE0, $28: POKE $9FE1, NO(MK):  REM SET KEY CODE
6610 POKE $9FE0, $08: POKE $9FE1, $08: REM KEY ON
6620 RETURN

6700 POKE $9FE0, $08: POKE $9FE1, $01: REM KEY OFF
6710 POKE $9FE0, $08: POKE $9FE1, $02: REM KEY OFF
6720 POKE $9FE0, $08: POKE $9FE1, $03: REM KEY OFF
6730 POKE $9FE0, $29: POKE $9FE1, CH(MK):  REM SET KEY CODE
6740 IF CH(MK)=$41 THEN GOSUB 6800: REM D MINOR
6750 IF CH(MK)=$3E THEN GOSUB 6900: REM C MAJOR
6760 POKE $9FE0, $08: POKE $9FE1, $09: REM KEY ON
6770 POKE $9FE0, $08: POKE $9FE1, $0A: REM KEY ON
6780 POKE $9FE0, $08: POKE $9FE1, $0B: REM KEY ON
6790 RETURN

6800 POKE $9FE0, $2A: POKE $9FE1, $45:  REM SET KEY CODE
6810 POKE $9FE0, $2B: POKE $9FE1, $4A:  REM SET KEY CODE
6820 RETURN

6900 POKE $9FE0, $2A: POKE $9FE1, $44:  REM SET KEY CODE
6910 POKE $9FE0, $2B: POKE $9FE1, $48:  REM SET KEY CODE
6920 RETURN

6990 REM UPDATE GRAPHICS
7000 REM UPDATE PLAYER SPRITE
7010 S=XP-RP:T=INT(S/256)
7020 VPOKE $1, $FC03, T
7030 VPOKE $1, $FC02, S-T*256
7040 REM UPDATE BOT SPRITE
7050 S=XQ-RQ:T=INT(S/256)
7060 VPOKE $1, $FC0B, T
7070 VPOKE $1, $FC0A, S-T*256
7080 REM UPDATE BALL SPRITE
7090 S=XB-RB:T=INT(S/256)
7100 VPOKE $1, $FC13, T
7110 VPOKE $1, $FC12, S-T*256
7120 S=YB-RB:T=INT(S/256)
7130 VPOKE $1, $FC15, T
7140 VPOKE $1, $FC14, S-T*256
7150 PRINT CHR$($91);CHR$(29);
7160 PRINT "                                SCORE";SC
7170 RETURN

8000 REM
8010 REM SETUP SCREEN
8020 REM
8030 REM DISABLE SPRITES
8040 POKE $9F25, 0 : REM SET DCSEL = 0
8050 POKE $9F29, PEEK($9F29) AND $BF

8090 FOR I=0TO59
8100 VPOKE 0, 256*I+1,      $11
8110 VPOKE 0, 256*I+79*2+1, $11
8120 NEXT I
8130 FOR I=50TO59
8140 VPOKE 0, 256*I+39*2+1, $11
8150 NEXT I

8200 REM
8210 REM INITIALIZE SPRITE DATA
8220 REM
8230 ADDR=$C000: REM HEART SPRITE DATA
8240 SIZE=32*32
8250 GOSUB 9800
8260 REM
8270 ADDR=$8000: REM PLAYER SPRITE DATA
8280 SIZE=32*16
8290 GOSUB 9800
8300 REM
8310 ADDR=$A000: REM BALL SPRITE DATA
8320 SIZE=16*16
8330 GOSUB 9800

8400 REM CONFIGURE PLAYER SPRITE
8410 VPOKE $1, $FC00, $00
8420 VPOKE $1, $FC01, $84
8430 VPOKE $1, $FC02, XP-RP
8440 VPOKE $1, $FC03, $00
8450 VPOKE $1, $FC04, YP-RP-256
8460 VPOKE $1, $FC05, $01
8470 VPOKE $1, $FC06, $0C
8480 VPOKE $1, $FC07, $64

8500 REM CONFIGURE BOT SPRITE
8510 VPOKE $1, $FC08, $00
8520 VPOKE $1, $FC09, $84
8530 VPOKE $1, $FC0A, XQ-RQ-256
8540 VPOKE $1, $FC0B, $01
8550 VPOKE $1, $FC0C, YQ-RQ-256
8560 VPOKE $1, $FC0D, $01
8570 VPOKE $1, $FC0E, $0C
8580 VPOKE $1, $FC0F, $67

8600 REM CONFIGURE BALL SPRITE
8610 VPOKE $1, $FC10, $00
8620 VPOKE $1, $FC11, $85
8630 VPOKE $1, $FC12, XB-RB
8640 VPOKE $1, $FC13, $00
8650 VPOKE $1, $FC14, YB-RB
8660 VPOKE $1, $FC15, $00
8670 VPOKE $1, $FC16, $0C
8680 VPOKE $1, $FC17, $53

8700 REM CONFIGURE HEART SPRITES
8710 FOR I=0TO2
8720 VPOKE $1, $FC20+8*I, $00
8730 VPOKE $1, $FC21+8*I, $86
8740 VPOKE $1, $FC22+8*I, I*40+100
8750 VPOKE $1, $FC23+8*I, $00
8760 VPOKE $1, $FC24+8*I, $10
8770 VPOKE $1, $FC25+8*I, $00
8780 VPOKE $1, $FC26+8*I, $0C
8790 VPOKE $1, $FC27+8*I, $AE

8800 VPOKE $1, $FC40+8*I, $00
8810 VPOKE $1, $FC41+8*I, $86
8820 VPOKE $1, $FC42+8*I, I*40+400-256
8830 VPOKE $1, $FC43+8*I, $01
8840 VPOKE $1, $FC44+8*I, $10
8850 VPOKE $1, $FC45+8*I, $00
8860 VPOKE $1, $FC46+8*I, $0C
8870 VPOKE $1, $FC47+8*I, $AE
8880 NEXT I

8900 REM
8910 REM ENABLE SPRITES
8920 REM
8930 POKE $9F25, 0 : REM SET DCSEL = 0
8940 POKE $9F29, PEEK($9F29) OR $40
8950 RETURN

9000 REM THIS IS THE SPRITE DATA (32x32) FOR THE HEART
9010 DATA 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
9020 DATA 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
9030 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9040 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9050 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9060 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9070 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9080 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9090 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9100 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9110 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9120 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9130 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9140 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9150 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9160 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9170 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9180 DATA 0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0
9190 DATA 0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0
9200 DATA 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
9210 DATA 0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
9220 DATA 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
9230 DATA 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
9240 DATA 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
9250 DATA 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
9260 DATA 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
9270 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
9280 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9290 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9300 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9310 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9320 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

9400 REM THIS IS THE SPRITE DATA (32x16) FOR THE PLAYER
9410 DATA 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
9420 DATA 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
9430 DATA 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
9440 DATA 0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
9450 DATA 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
9460 DATA 0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0
9470 DATA 0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0
9480 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9490 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9500 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9510 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9520 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9530 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9540 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9550 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9560 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

9600 REM THIS IS THE BALL DATA (16x16)
9610 DATA 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
9620 DATA 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
9630 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9640 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9650 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9660 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9670 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9680 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9690 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9700 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9710 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
9720 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9730 DATA 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
9740 DATA 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
9750 DATA 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
9760 DATA 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0

9800 REM
9810 REM INITIALIZE SPRITE DATA
9820 REM
9830 REM "ADDR" MUST POINT TO FIRST VRAM BYTE OF SPRITE DATA
9840 REM "SIZE" MUST BE NUMBER OF BYTES TO WRITE
9850 FOR I=1TOSIZE
9860 READ A
9870 VPOKE $0, ADDR, A
9880 ADDR=ADDR+1
9890 NEXT I
9900 RETURN




